package com.newcore.ifrs17.fact.contract;
import  com.newcore.ifrs17.fact.contract.IFRS17DefCntrgrpSigRiskTest;


rule "IFRS17DefCntrgrpSigRiskTest_minAccUnitCode_check"
activation-group "minAccUnitCodeCheck"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest( minCalUnitCode==null || minCalUnitCode not matches("^[A-Za-z0-9_]$"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark("最小计量单元编码为空或不符合规则 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_minAccUnitCode_checkNull"
activation-group "minAccUnitCodeCheck"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(minCalUnitCode!=null && minCalUnitCode.toUpperCase()=="NULL")
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark("最小计量单元编码为空或不符合规则 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_insuredSex_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(insuredSex !=null&&(insuredSex not in ("M","F")||insuredSex.toUpperCase()=="NULL") )
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"被保险人性别输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"被保险人性别输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_insuredAge_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(insuredAge !=null&&(insuredAge not matches("^[0-9]*$")||insuredAge.toUpperCase()=="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"被保险人投保年龄为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"被保险人投保年龄为空或者输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_insurDurUnit_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(insurDurUnit !=null&&(insurDurUnit not matches("^[0-9]*$")||insurDurUnit.toUpperCase()=="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"保险期间类型为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"保险期间类型为空或者输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_insurDurAmnt_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(insurDurAmnt !=null&&(insurDurAmnt not matches("^[0-9]*$")||insurDurAmnt.toUpperCase()=="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"保险期间为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"保险期间为空或者输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_moneyinDurUnit_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(moneyinDurUnit !=null&&(moneyinDurUnit not matches("^[0-9]*$")||moneyinDurUnit.toUpperCase()=="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"缴费期间类型为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"缴费期间类型为空或者输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_moneyinDurAmnt_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(moneyinDurAmnt !=null&&(moneyinDurAmnt not matches("^[0-9]*$")||moneyinDurAmnt.toUpperCase()=="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"缴费期间为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"缴费期间为空或者输入不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_annuityRecType_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(annuityRecType!=null&&(annuityRecType not in ("01","02","03","04","05","06","07","08","A","B","C","D","E","F") || annuityRecType.toUpperCase()!="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"年金领取类型为空或格式不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"年金领取类型为空或格式不正确 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_annuityRecItrvl_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(annuityRecItrvl!=null&&(annuityRecItrvl not in ("Y","H","Q","M","W")|| annuityRecItrvl.toUpperCase()!="NULL"))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"年金领取频率为空或者不符合规则":ifrs17DefCntrgrpSigRiskTest.getRemark()+"年金领取频率为空或者不符合规则 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_annuityRecAge_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(annuityRecAge!=null && (annuityRecAge not matches("^[0-9]{1,3}$") || annuityRecAge.toUpperCase()!="NULL"))
    then
         ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"年金领取年龄为空或者不符合规则":ifrs17DefCntrgrpSigRiskTest.getRemark()+"年金领取年龄为空或者不符合规则 \n");
    end
rule "IFRS17DefCntrgrpSigRiskTest_sigRiskTestResult_check"
    when ifrs17DefCntrgrpSigRiskTest:IFRS17DefCntrgrpSigRiskTest(sigRiskTestResult ==null||(sigRiskTestResult not in (1,2)))
    then
        ifrs17DefCntrgrpSigRiskTest.setRemark(ifrs17DefCntrgrpSigRiskTest.getRemark()==null?"重大风险测试结果为空或者输入不正确":ifrs17DefCntrgrpSigRiskTest.getRemark()+"重大风险测试结果为空或者输入不正确 \n");
    end
