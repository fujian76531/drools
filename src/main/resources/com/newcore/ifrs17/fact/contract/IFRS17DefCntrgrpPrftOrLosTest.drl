package com.newcore.ifrs17.fact.contract;
import  com.newcore.ifrs17.fact.contract.IFRS17DefCntrgrpPrftOrLosTest;
import  java.util.Map;
global  java.util.Map globalMap;

rule "IFRS17DefCntrgrpPrftOrLosTest_minAccUnitCode_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest( minAccUnitCode==null || minAccUnitCode.trim() == "" || minAccUnitCode.toUpperCase() =="NULL"|| minAccUnitCode not matches("^[A-Za-z0-9_]*$"))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark("最小核算单元编码为空或不符合规则 \n");
    end
rule "IFRS17DefCntrgrpPrftOrLosTest_minAccUnitName_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(minAccUnitName == null || (minAccUnitName != null && minAccUnitName.trim() == ""))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"最小核算单元名称不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"最小核算单元名称不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_insurDurUnit_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insurDurUnit == null || (insurDurUnit!=null&&insurDurUnit.length() == 0) || (insurDurUnit.trim().toUpperCase()!="NULL"&&insurDurUnit not matches("^[0-9]*$")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"保险期间类型为空或不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"保险期间类型为空或不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_moneyinDurUnit_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(moneyinDurUnit == null || (moneyinDurUnit!=null&&moneyinDurUnit.length() == 0) || (moneyinDurUnit.trim().toUpperCase()!="NULL"&&moneyinDurUnit not matches("^[0-9]*$")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"缴费期间类型为空或不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"缴费期间类型为空或不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_insuredSex_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insuredSex == null || (insuredSex!=null&&insuredSex.length() == 0) || (insuredSex.trim().toUpperCase()!="NULL"&&insuredSex not in ("M","F")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"被保险人性别为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"被保险人性别为空或者输入不正确 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_holderAge_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(holderAge == null || (holderAge!=null&&holderAge.length() == 0) || (holderAge.trim().toUpperCase()!="NULL"&&holderAge not matches("^[0-9]*$")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"投保险人年龄为空或不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"投保险人年龄为空或不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_holderSex_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(holderSex == null || (holderSex!=null&&holderSex.length() == 0) || (holderSex.trim().toUpperCase()!="NULL"&&holderSex not in ("M","F")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"投保险人性别为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"投保险人性别为空或者输入不正确 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_type_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(type == null || (type !=null&&(type not in ("1","2")&&type.toUpperCase()!="NULL")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"判断类型为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"判断类型为空或者输入不正确 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_annualizedPremiumCeilingFloor_Comparison_check"
activation-group "annualizedPremiumCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest((annualizedPremiumCeiling  matches("^[0-9.]{1,100}$") && (annualizedPremiumFloor  matches("^[0-9.]{1,100}$")))==true &&(Float.valueOf(annualizedPremiumCeiling)<Float.valueOf(annualizedPremiumFloor)))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"年化保费上下限不符合规则或年化保费上限小于下限 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"年化保费上下限不符合规则或年化保费上限小于下限 \n");
    end
rule "IFRS17DefCntrgrpPrftOrLosTest_annuityRecType_check"
   when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(annuityRecType == null ||(annuityRecType!=null&&(annuityRecType not in ("A","B","C","D","E","F") && annuityRecType.trim().toUpperCase()!="NULL")))
   then
       ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"年金领取类型为空或格式不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"年金领取类型为空或格式不正确 \n");
   end
rule "IFRS17DefCntrgrpPrftOrLosTest_annuityRecItrvl_check"
   when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(annuityRecItrvl == null ||(annuityRecItrvl!=null&&(annuityRecItrvl not in ("Y","H","Q","M","W")&& annuityRecItrvl.trim().toUpperCase()!="NULL")))
   then
       ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"年金领取频率为空或者不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"年金领取频率为空或者不符合规则 \n");
   end
rule "IFRS17DefCntrgrpPrftOrLosTest_annuityRecAge_check"
   when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(annuityRecAge == null || (annuityRecAge!=null && (annuityRecAge not matches("^[0-9]{1,3}$") && annuityRecAge.trim().toUpperCase()!="NULL")))
   then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"年金领取年龄为空或者不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"年金领取年龄为空或者不符合规则 \n");
   end
rule "ifrs17DefCntrgrpPrftOrLosTest_annualizedPremiumCeilingFloor_Null_check"
activation-group "annualizedPremiumCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(annualizedPremiumCeiling==null || annualizedPremiumFloor == null ||annualizedPremiumCeiling.trim() == "" || annualizedPremiumFloor.trim() == "")
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"年化保费上限或年化保费下限为空 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"年化保费上限或年化保费下限为空 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_annualizedPremiumCeilingFloor_Rule_check"
activation-group "annualizedPremiumCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest((type != null && type.trim()=="2"&&annualizedPremiumCeiling!=null && annualizedPremiumFloor != null&& (annualizedPremiumCeiling.toUpperCase()!="NULL"||annualizedPremiumFloor.toUpperCase()!="NULL"))||(type != null &&type.trim().toUpperCase()=="NULL"&& (annualizedPremiumCeiling.toUpperCase()!="NULL" || annualizedPremiumFloor.toUpperCase()!="NULL")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"判断类型为2或NULL，年化保费上限，下限必须为NULL \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"判断类型为2或NULL，年化保费上限，下限必须为NULL \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_faceAmntCeiling_Null_check"
activation-group "faceAmntCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(faceAmntCeiling==null || faceAmntFloor == null ||faceAmntCeiling.trim() == "" || faceAmntFloor.trim() == "")
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"保额上限或保额下限为空 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"保额上限或保额下限为空 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_faceAmntCeilingFloor_Rule_check"
activation-group "faceAmntCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest((type != null && type.trim()=="1"&&faceAmntCeiling!=null && faceAmntFloor != null&&(faceAmntCeiling!=null&&faceAmntFloor!=null&&faceAmntCeiling.toUpperCase()!="NULL"||faceAmntFloor.toUpperCase()!="NULL"))||(type != null &&type.trim().toUpperCase()=="NULL"&& (faceAmntCeiling!=null&&faceAmntFloor!=null&&faceAmntCeiling.toUpperCase()!="NULL" || faceAmntFloor.toUpperCase()!="NULL")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"判断类型为1或NULL，保额上限、下限必须为NULL \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"判断类型为1或NULL，保额上限、下限必须为NULL \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_faceAmntCeilingFloor_Comparison_check"
activation-group "faceAmntCeilingFloor"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest((faceAmntCeiling matches("^[0-9.]{1,100}$") && (faceAmntFloor  matches("^[0-9.]{1,100}$")))==true &&(Float.valueOf(faceAmntCeiling)<Float.valueOf(faceAmntFloor)))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"保额上下限不符合规则，保额上限小于下限 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"保额上下限不符合规则，保额上限小于下限 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_insurDurAmnt_check"
activation-group "insurDurAmnt_group"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insurDurAmnt==null || moneyinDurAmnt == null ||insurDurAmnt.trim() == "" || moneyinDurAmnt.trim() == "")
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"保险期间或缴费期间不可为空 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"保险期间或缴费期间不可为空 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_insurDurAmntRule_check"
activation-group "insurDurAmnt_group"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insurDurAmnt!=null && moneyinDurAmnt != null && ((insurDurAmnt.trim().toUpperCase() != "NULL" && insurDurAmnt not matches("^[0-9.]*$"))||(moneyinDurAmnt.trim().toUpperCase() != "NULL" && moneyinDurAmnt not matches("^[0-9.]*$"))))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"保险期间或缴费期间不符合规则":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"保险期间或缴费期间不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_holderAgeCompare_check"
activation-group "moneyinDurAmntPremiumInsurDurAmnt"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest((moneyinDurAmnt matches("^[0-9.]{1,100}$") && (insurDurAmnt  matches("^[0-9.]{1,100}$")))==true &&(Float.valueOf(insurDurAmnt)<Float.valueOf(moneyinDurAmnt)))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"缴费期间不可大于保险期间 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"缴费期间不可大于保险期间 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_insuredAgeRule_check"
activation-group "insuredAge_group"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insuredAge == null || (insuredAge!=null&&insuredAge.length() == 0) || (insuredAge.trim().toUpperCase()!="NULL"&&insuredAge not matches("^[0-9.]*$")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"被保险人投保年龄为空或不符合规则 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"被保险人投保年龄为空或不符合规则 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_holderAgeCalculateZero_check"
activation-group "insuredAge_group"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insurDurUnit != null && insurDurUnit.trim() == "0" && insuredAge != null && insuredAge.trim().toUpperCase()!="NULL" &&(Float.valueOf(insuredAge)+Float.valueOf(insurDurAmnt))>106)
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"被投保人年龄加保险期间需小于106岁 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"被投保人年龄加保险期间需小于106岁 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_holderAgeCalculateOne_check"
activation-group "insuredAge_group"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(insurDurUnit != null && insurDurUnit.trim() == "1" && insuredAge != null && insuredAge.trim().toUpperCase()!="NULL" &&((Float.valueOf(insuredAge)>Float.valueOf(insurDurAmnt)) || (Float.valueOf(insurDurAmnt)>106)))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"被投保人年龄大于保险期间或保险期间大于106":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"被投保人年龄大于保险期间或保险期间大于106 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_giftType_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(giftType == null || (giftType!=null&&giftType.length() == 0) || (giftType.trim().toUpperCase()!="NULL"&&giftType not in ("Y","N")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"是否为赠送险为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"是否为赠送险为空或者输入不正确 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_bonusProp_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(bonusProp == null || (bonusProp!=null&&bonusProp.length() == 0) || (bonusProp.trim().toUpperCase()!="NULL"&&bonusProp not matches("^[0-9]*$")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"分红比例为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"分红比例为空或者输入不正确 \n");
    end
rule "ifrs17DefCntrgrpPrftOrLosTest_profitOrLossTestResult_check"
    when ifrs17DefCntrgrpPrftOrLosTest:IFRS17DefCntrgrpPrftOrLosTest(profitOrLossTestResult==null||(profitOrLossTestResult not in ("A","B","C")))
    then
        ifrs17DefCntrgrpPrftOrLosTest.setRemark(ifrs17DefCntrgrpPrftOrLosTest.getRemark()==null?"盈亏测试结果为空或者输入不正确 \n":ifrs17DefCntrgrpPrftOrLosTest.getRemark()+"盈亏测试结果为空或者输入不正确 \n");
    end