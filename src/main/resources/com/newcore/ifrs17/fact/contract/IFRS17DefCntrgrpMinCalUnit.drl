package com.newcore.ifrs17.fact.contract;
import  com.newcore.ifrs17.fact.contract.IFRS17DefCntrgrpMinCalUnit;

rule "IFRS17DefCntrgrpMinCalUnit_minCalUnitCode_check"
activation-group "polCodeCheck"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit( polCode==null  ||polCode.toUpperCase() =="NULL"|| polCode not matches("^[A-Za-z0-9_]{1,100}$"))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark("精算代码为空或不符合规则 \n");
    end
rule "IFRS17DefCntrgrpMinCalUnit_polName_checkNull"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit( polName != null && polName.trim() == "")
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"产品名称不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"产品名称不符合规则\n");
    end
rule "IFRS17DefCntrgrpMinCalUnit_isMerge_checkNull"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit( isMerge==null  ||isMerge.toUpperCase() =="NULL"|| isMerge not in ("Y","N"))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"是否合并为空或者不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"是否合并为空或者不符合规则 \n");
    end

rule "IFRS17DefCntrgrpMinCalUnit_polCodeMerged_checkNull"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit((isMerge=="Y" && (polCodeMerged==null || polCodeMerged.toUpperCase() =="NULL" ||polCodeMerged.trim() == "")|| polCodeMerged not matches("^[A-Za-z0-9|]{1,100}$"))|| (isMerge=="N" && (polCodeMerged !=null && polCodeMerged.toUpperCase() !="NULL")))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"被合并产品精算代码不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"被合并产品精算代码不符合规则 \n");
    end
rule "IFRS17DefCntrgrpMinCalUnit_prodNameMerged_checkNull"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit( (isMerge=="Y" && (prodNameMerged==null || prodNameMerged.toUpperCase() =="NULL"||prodNameMerged.trim() == ""))|| (isMerge=="N" && (prodNameMerged !=null && prodNameMerged.toUpperCase() !="NULL")))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"被合并产品名称不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"被合并产品名称不符合规则\n");
    end

rule "IFRS17DefCntrgrpMinCalUnit_excOrder_checkNull"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit( excOrder == null || excOrder not matches("^[0-9]$"))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"执行顺序不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"执行顺序不符合规则\n");
    end
rule "IFRS17DefCntrgrpMinCalUnit_minCalUnitCode_checkTwo_Rule"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit(minCalUnitCode==null|| minCalUnitCode not matches("^[A-Za-z0-9_]{1,100}$"))
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"最小计量单元编码不符合规则 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"最小计量单元编码不符合规则 \n");
    end
rule "IFRS17DefCntrgrpMinCalUnit_minAccUnitName_check_EndWith"
    when ifrs17DefCntrgrpMinCalUnit:IFRS17DefCntrgrpMinCalUnit(minCalUnitName != null && minCalUnitName.trim() == "")
    then
        ifrs17DefCntrgrpMinCalUnit.setRemark(ifrs17DefCntrgrpMinCalUnit.getRemark()==null?"最小计量名称为空 \n":ifrs17DefCntrgrpMinCalUnit.getRemark()+"最小计量单元名称为空\n");
    end
