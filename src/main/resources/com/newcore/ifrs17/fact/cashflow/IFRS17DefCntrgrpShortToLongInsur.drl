package com.newcore.ifrs17.fact.cashflow;
import  com.newcore.ifrs17.fact.contract.IFRS17DefCntrgrpShortToLongInsur;

rule "IFRS17DefCntrgrpShortToLongInsur_polCode_check"
    when ifrs17DefCntrgrpShortToLongInsur:IFRS17DefCntrgrpShortToLongInsur( polCode==null || polCode.toUpperCase() =="NULL"|| polCode not matches "^[A-Z0-9a-z_]{1,10}$")
    then
        ifrs17DefCntrgrpShortToLongInsur.setRemark("精算代码为空或不符合规则 \n");
    end
rule "IFRS17DefCntrgrpShortToLongInsur_polName_check"
    when ifrs17DefCntrgrpShortToLongInsur:IFRS17DefCntrgrpShortToLongInsur(polName == null|| polName.toUpperCase() =="NULL" || polName.length() == 0)
    then
        ifrs17DefCntrgrpShortToLongInsur.setRemark(ifrs17DefCntrgrpShortToLongInsur.getRemark()==null?"产品名称为空 \n":ifrs17DefCntrgrpShortToLongInsur.getRemark()+"产品名称为空 \n");
    end
rule "IFRS17DefActualCashflowBiDataSceneConversion_isLongTermInsur_check"
    when ifrs17DefCntrgrpShortToLongInsur:IFRS17DefCntrgrpShortToLongInsur(isLongTermInsur == null || isLongTermInsur not in ("Y","N"))
    then
        ifrs17DefCntrgrpShortToLongInsur.setRemark(ifrs17DefCntrgrpShortToLongInsur.getRemark()==null?"是否按长险计量不可为空或不符合规则 \n":ifrs17DefCntrgrpShortToLongInsur.getRemark()+"是否按长险计量不可为空或不符合规则 \n");
    end